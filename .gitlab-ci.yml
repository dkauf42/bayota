## This file is a template, and might need editing before it works on your project.
## Official language image. Look for the different tagged releases at:
## https://hub.docker.com/r/library/python/tags/
##image: python:latest
#image: python:3.6
#
## Change pip's cache directory to be inside the project directory since we can
## only cache local items.
#variables:
##  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
#  GIT_SUBMODULE_STRATEGY: recursive
#  CI_SERVER_URL: https://gitlab.com

###### Pip's cache doesn't store the python packages
###### https://pip.pypa.io/en/stable/reference/pip_install/#caching
######
###### If you want to also cache the installed packages, you have to install
###### them in a virtualenv and cache it as well.
#####cache:
#####  paths:
#####    - .cache/pip
#####    - venv/

#before_script:
#  - python -V               # Print out python version for debugging
#  - pip install virtualenv
#  - virtualenv venv
#  - source venv/bin/activate
#  - .monorepo.gitlab/last_green_commit.sh

#####  - ls
#####  - ls src/
#####  - ls src/
#####  - python -c "import sys; print(sys.path)"

##### use submodule https://github.com/awesome-inc/monorepo.gitlab.git to
##### build each monorepo subcomponent separately

#test:
#  script:
#  - .monorepo.gitlab/build_if_changed.sh castjeeves python castjeeves/setup.py test
#  - .monorepo.gitlab/build_if_changed.sh efficiencysubproblem python efficiencysubproblem/setup.py test
#  - .monorepo.gitlab/build_if_changed.sh sandbox python sandbox/setup.py test
#
#####  - python setup.py test
#####  - python -m pip install coverage
#####  - python -m coverage run -m src/tests/ discover
#####  - python -m coverage report -m
#####  - python -m coverage html
#  artifacts:
#    paths:
#      - htmlcov/
